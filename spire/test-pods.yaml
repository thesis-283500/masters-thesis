---
# Source: spire/charts/spiffe-oidc-discovery-provider/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "spire-server-spiffe-oidc-discovery-provider-test-connection"
  namespace: spire-server
  labels:
    helm.sh/chart: spiffe-oidc-discovery-provider-0.1.0
    app.kubernetes.io/name: spiffe-oidc-discovery-provider
    app.kubernetes.io/instance: spire-server
    app.kubernetes.io/version: "1.12.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  securityContext:
    {}
  containers:
    - name: curl-service-name
      image: "cgr.dev/chainguard/bash:latest@sha256:57ed0cb7b67f52ea7678128da5c4cf99c1a71d269db92a6a40c179fa57f00ce4"
      command: ['curl']
      args: ['-s', '-f', '-k', 'https://spire-server-spiffe-oidc-discovery-provider:443/.well-known/openid-configuration']
      securityContext:
        {}
    - name: curl-service-name-namespace
      image: "cgr.dev/chainguard/bash:latest@sha256:57ed0cb7b67f52ea7678128da5c4cf99c1a71d269db92a6a40c179fa57f00ce4"
      command: ['curl']
      args: ['-s', '-f', '-k', 'https://spire-server-spiffe-oidc-discovery-provider.spire-server:443/.well-known/openid-configuration']
      securityContext:
        {}
    - name: curl-service-name-namespace-svc-cluster-local
      image: "cgr.dev/chainguard/bash:latest@sha256:57ed0cb7b67f52ea7678128da5c4cf99c1a71d269db92a6a40c179fa57f00ce4"
      command: ['curl']
      args: ['-s', '-f', '-k', 'https://spire-server-spiffe-oidc-discovery-provider.spire-server.svc.cluster.local:443/.well-known/openid-configuration']
      securityContext:
        {}
  restartPolicy: Never
---
# Source: spire/charts/spiffe-oidc-discovery-provider/templates/tests/test-keys.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "spire-server-spiffe-oidc-discovery-provider-test-keys"
  namespace: spire-server
  labels:
    helm.sh/chart: spiffe-oidc-discovery-provider-0.1.0
    app.kubernetes.io/name: spiffe-oidc-discovery-provider
    app.kubernetes.io/instance: spire-server
    app.kubernetes.io/version: "1.12.2"
    app.kubernetes.io/managed-by: Helm
    release: spire-server
    release-namespace: spire-server
    component: test-keys
  annotations:
    "helm.sh/hook": test
spec:
  securityContext:
    {}
  serviceAccountName: spire-server-spiffe-oidc-discovery-provider
  initContainers:
    - name: static-busybox
      image: "busybox:1.37.0-uclibc"
      command:
        - sh
        - -c
        - |
          cp /bin/busybox /data/busybox
          chmod +x /data/busybox
      securityContext:
        {}
      volumeMounts:
        - name: data-volume
          mountPath: /data
    - name: install-step
      image: "docker.io/smallstep/step-cli:0.28.6"
      workingDir: /data
      command:
        - sh
        - -c
        - |
          cp /usr/local/bin/step /data/step
      securityContext:
        {}
      volumeMounts:
        - name: data-volume
          mountPath: /data
    - name: gettoken
      image: "ghcr.io/spiffe/spire-agent:1.12.2"
      command:
        - /data/busybox
        - sh
        - -c
        - |
          while true; do
            /opt/spire/bin/spire-agent api fetch jwt -audience foo -format json -socketPath /spire-agent/spire-agent.sock -timeout 5s > /data/token.svid
            [ $? -eq 0 ] && break
            sleep 1
          done
      securityContext:
        {}
      volumeMounts:
        - name: data-volume
          mountPath: /data
        - name: spire-api
          mountPath: /spire-agent
          readOnly: true
  containers:
    - name: verify-keys
      image: "cgr.dev/chainguard/min-toolkit-debug:latest@sha256:3e5ee5ed41e764999f8e499b48d2e62d1f8ffd526aad5b4c3aa7a0759e0139db"
      command:
        - bash
      workingDir: /data
      env:
      - name: TMPDIR
        value: /data
      args:
        - -cx
        - |
          URL=https://spire-server-spiffe-oidc-discovery-provider.spire-server.svc.cluster.local:443

          cat /data/token.svid
          JWT=$(cat /data/token.svid | jq -r '.[] | select(.svids) | .svids[0].svid' | xargs)
          KID=$(echo $JWT | base64 -d 2>/dev/null | jq -r '.kid')
          # Retrieve public key from JWK set, match kid from JWT to locate the correct one
          curl -k -s --fail-with-body "${URL}"/keys | jq '.keys[] | select(.kid == "'${KID}'")' > public.pem
          # Verify JWT with public pem
          echo $JWT | /data/step crypto jwt verify --key=public.pem --alg=RS256 --subtle
      securityContext:
        {}
      volumeMounts:
      - mountPath: /data
        name: data-volume
  restartPolicy: Never
  volumes:
  - csi:
      driver: csi.spiffe.io
      readOnly: true
    name: spire-api
  - name: data-volume
    emptyDir: {}
---
# Source: spire/charts/spire-server/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "spire-server-test-connection"
  namespace: spire-server
  labels:
    helm.sh/chart: spire-server-0.1.0
    app.kubernetes.io/name: server
    app.kubernetes.io/instance: spire-server
    app.kubernetes.io/version: "1.12.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: test
  annotations:
    "helm.sh/hook": test
spec:
  securityContext:
    {}
  containers:
    - name: curl
      image: "cgr.dev/chainguard/bash:latest@sha256:57ed0cb7b67f52ea7678128da5c4cf99c1a71d269db92a6a40c179fa57f00ce4"
      command: ['bash']
      args:
        - -c
        - |
          curl -f -s 'https://spire-server:443'
          NOCA=$?
          curl -k -f -s 'https://spire-server:443'
          IGNORECA=$?
          echo $NOCA $IGNORECA
          if [ $NOCA -eq 60 -a $IGNORECA -eq 22 ]; then
            # We were able to connect to the server but didn't recognize the ca (60) and the page not found (22) because we're not using grpc
            exit 0
          fi
          exit 1
      securityContext:
        {}
  restartPolicy: Never
